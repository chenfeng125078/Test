* 以及 & 两个符号分别代表的含义

每一个变量都有一个内存位置，每一个内存位置都可以通过连字号（&）访问地址: 它表示了在内存中的一个地址

* 在声明语句时的含义：
      int  *par  :  这里时声明一个int型指针变量 par ！！！而不是定义一个整型变量！！！( 注意此时par是一个指针变量，*par才是一个整型变量 )
		但是可以通过 *par 取获取 par 指向的数据
* 在定义语句中的含义：
      y = *par :  表示取指针所指向的数据 （这里的指针是变量指针）

& 在声明语句中的含义：
      int &a = x : 声明一个对象x引用（声明a是x的引用, a 和 x 的地址相同; a 也可看做 x 的别名）
& 在定义语句中的含义：
      par = &a : 表示取对象的内存地址 （此时 par是一个指针，为对象 a 的地址）


函数与指针、引用的联系
       函数要使用参数，则必须声明接受参数值的变量。这些变量称为函数的形式参数（形参）,形参就像函数内的其他局部变量，进入函数是被创建，退出时销毁
1.传值调用：
          该方法把参数的实际值赋值给形参，在这种情况下，修改参数内的形式参数对实际参数没有影响
2.指针调用：
          该方法把参数的地址值赋值给形参，在函数内，该地址用于访问调用中要用到的实际参数，意味着：修改形参会影响到实际参数
3.引用调用（最经常的方法）：
          该方法把参数的引用赋值给形参，在函数内，该引用用于访问调用中要用到的实际参数。此时修改形参会影响实际参数

例程截取：
1.传值调用：void swap(int x, int y)
	{
	     int temp = x;
	     x = y;
	     y = temp;
	}

2.指针调用：void swap(int *x, int *y)    传进来的是实参指针
	{
	     int temp = *x;
	     *x = *y;
	     *y = temp;
	}

3.引用调用：void swap(int &x, int &y)    传进来的是实参 此时 x 是第一实参的引用，y是第二实参的引用   ---------- 最好的方法
	{
	     int temp = x;
	     x = y;
	     y = temp;
	}
int a = 100;
int b = 200;
传值调用：swap( a,  b )；  
cout << a << b << endl;           值不会发生变化，结果依然是 a=100, b =200
指针调用：swap( &a,  &b );         &a(取址得到a的指针)， 函数中形参也是指针
cout << a << b << endl;           值会变化，a,b值进行对调，此时 a=200, b=100
引用调用：swap( a,  b );
cout << a << b << endl;           值会变化， 此时 a=200, b=100


数组与指针的联系：
       定义数组：double  para[50]  此时定义一个一维长度为50的数组
       其中 para 是一个指向 &para[0] 的指针（para[0]的地址）

       double  *p;
       p = para;
       其中使用数组名作为常量指针是合法的，反之亦然 ； 因此，*（para+4）是一种访问 para[4]数据的合法方式
       一旦把第一个元素的地址存储在p指针中，也可以通过 *p.  *(p+1).  *(P+2)等来访问数组元素

传递数组给函数的三种方法：
       取数组内的值：int a = para[0]    第一个元素（像python）
       1.形参是一个指针：
	void myFunction( int *para )
	{
	取数组内的值  int a = para[0]  第一个元素
	........
	}
       2.形参是一个已定义大小的数组：
	void myFunction( int  para[10] )
	{
	......
	}
       3.形参是一个未定义大小的数组：
	void myFunction( int  para[ ] )
	{
	......
	}
上述三种方式都是向函数传一个整型指针
