该混淆点主要发生在python和c++opencv中：
	
	image = cv2.imread( image_path )
       首先我们得明确的是一副图像的原点位于图像的左上角，该图像 x轴的正方向 是向右，y轴正方向是向下。

       图像矩阵某一点像素的像素值 是 image[行数][列数](注意：该值并不等于image[x][y]!!!!) ==image[y][x],
       此时的 x,y 坐标为图像坐标，也就是说 在python中：（x,y）坐标点 的像素值 = Mat[y][x]
				在c++中：Mat::at(Point(x, y)) == Mat::at(y,x)  其中 Point(x, y)代表图像中的点(x,y),后面代表矩阵y行x列。
       为什么以前一直混淆：
	一直把python opencv中获取像素值 image[][] 第一个坐标当作x,第二个当作y,  实际第一个坐标为行数(y),第二个为列数(x).      

在python opencv中：
        读取图像：cv2.imread( 图片路径, 读取模式 )    模式“1”: 彩色图像， "0":灰色图像
        显示图像：cv2.imshow( 窗口名字，图像数组 )    注意后面要接 cv2.waitKey(0) 否则图像显示不出来。
        保存图像：cv2.imwrite( 图像路径，数组 )

图像处理函数：
        三颜色通道转换为灰度图像：dst = cv2.cvtColor(src, cv2.COLOR_BGR2GRAY)

        图像阈值处理：ret, dst = cv2.threshold( src, thresh, maxval, type )  注意：阈值处理有两个返回值！！！！生成二值图像
		第一个参数：源图像（必须是灰度图像）  第二个参数：阈值      第三个参数：表示图像像素最大值
		第四个参数：处理方式

        核算子(类似卷积核)：kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (9, 9))   第一个参数有：1.矩形：cv2.MORPH_RECT, 2.椭圆：MORPH_ELLIPSE 3.十字交叉型：MORPH_CROSS       
									第二个参数：核算子数组大小（一定为奇数）

这里 假设背景为黑色（大多情况下都是转换为灰度图像再处理， 彩色图像一样可以进行以下处理）
        膨胀：cv2.dilate(grayImage, kernel)   灰度图像根据核算子卷积算法扩展图像

        腐蚀：cv2.erode(grayImage, kernel)   灰度图像根据核算子腐蚀(黑色背景扩大)图像

        开运算：先腐蚀后膨胀（因此白色小斑点没了）cv2.morphologyEx(grayImage, cv2.MORPH_OPEN, kernel)      morphologyEx: 形态学滤波函数
		第一个参数：处理的灰度图像 ； 第二个参数：滤波函数类型(开运算)； 第三个参数：核算子

        闭运算：先膨胀后腐蚀（去除图像中的黑色小斑点）cv2.morphologyEx(grayImage, cv2.MORPH_CLOSE, kernel )

        顶帽( 礼帽 )：原始图像与 进行开运算之后得到的图像之差（可筛选出原图中比邻近点亮一些的斑块）
		cv2.morphologyEx( grayImage, cv2.MORPH_TOPHAT, kernel)

        黑帽：进行闭运算以后得到的图像与原图像之差（可筛选出原图中比邻近点暗一些的斑块）
		cv2.morphologyEx( grayImage, cv2.MORPH_BLACKHAT, kernel )

形态学梯度：可显示出膨胀和腐蚀的差别，看上去就像前景物体的轮廓
       基本梯度：用膨胀后的图像减去腐蚀后的图像得到的差值图像，opencv中有直接可调用的函数,所以称为基本梯度
		cv2.morphologyEx( grayImage, cv2.MORPH_GRADIENT, kernel )

       内部梯度：用原图像减去腐蚀后的图像得到差值图像（相当于原图像的 内接边界），称为内部梯度
		erode = cv2.erode( grayImage, kernel )
		dst1 = cv2.subtract( grayImage, erode )

       外部梯度：用膨胀后的图像减去原图像得到的差值图像（相当于原图像的外接边界）,称为外部梯度
		dilate = cv2.dilate( grayImage, kernel )
		dst = cv2.subtract( dilate, grayImage )

c++ opencv函数总结：










        