下面介绍如何用matplotlib制作动画

在matplotlib 中主要利用Animation类制作动画，下面主要说明Animation类如何实现动画，以sin函数为例
# 下面实现的时多个点同时移动 只需要在一定函数中同时加入多个点的变化关系

1. 
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation

def update_points(num):
    point_ani.set_data(  x[num], y[num] )
    if num % 5 == 0:
        point_ani.set_marker( "*")   # 若整除5，则点为星形
        point_ani.set_markersize(12)  # 大小
    else:
        point_ani.set_marker("o")   # 形状为圆点
        point_ani.set_markersize(8)
    text_pt.set_position( （x[num], y[num] ）)  # 文本随着动画点移动 ，注意 set_position( (x, y) 有个括号代表点位置
    text_pt.set_text("x=%.3f, y=%.3f" % (x[num], y[num]))  # 文本随着值变化而变化
    return point_ani, text_pt,

# 先制作sin函数背景图
x = np.linspace(0, 2*np.pi, 100) # 等差数列分成100份
y = np.sin(x)
    # plt.figure( )参数说明 figure(num=None, figsize=None, facecolor=None, edgecolor=None, frameon=True)
    # num:图像编号或名称，数字为编号 ，字符串为名称
    # figsize:指定figure的宽和高，单位为英寸；
    # dpi参数指定绘图对象的分辨率，即每英寸多少个像素，缺省值为80      1英寸等于2.5cm,A4纸是 21*30cm的纸张 
    # facecolor:背景颜色
    # edgecolor:边框颜色
    # frameon:是否显示边框
fig = plt.figure(tight_layout=True)  # tight_layout 表示多图像时自动布局，不会使 label 和坐标系重叠，看起来整洁
plt.xlabel("x", fontsize=10)  # fontsize代表字号大小
plt.ylabel("y", fontsize=10)
plt.plot(x, y)
point_ani , = plt.plot(x[0], y[0], "ro")   # plt.plot返回两个参数，因此需要用","隔开 。此为第一个动画起点
point_ani_2 , = plt.plot(x[99], y[99], "go")  # 此为第二个动画起点
point_ani_3 , = plt.plot(x[49], y[49], "yo"） #此为第三个动画起点
plt.grid( ls="--")  # 坐标系做出网格线,线格式为'--'
text_pt = plt.text(4, 0.8, "", fontsize)  
    # 该函数时在图像中添加文字text
    #  plt.text(x, y, string, fontsize, verticalalignment="bottom", horizontalalignment="left")
    # x, y代表文字显示的坐标值
    # string：表示说明文字
    # fontsize：表示字体大小
    # verticalalignment：竖直方向对齐方式，默认default="bottom",有"center","top","bottom","baseline"
    # horizontalalignment：水平对齐方式，默认default="left", 有"center","left", "right"
ani = animation.FuncAnimation(fig, update_points, frames=100, interval=100, blit=True)
    # fig代表进行动画绘制的figure
    # func 代表自定义动画函数，即刚传入的刚定义的函数update_points
    # frames 代表动画的帧数
    # interval 代表每一帧之间的间隔
plt.show( )