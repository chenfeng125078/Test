1. bool类型可以与数相乘,相乘时,若 bool=True,则当做1进行乘法运算,若 bool=false,则当做0进行乘法运算.

2.多维数组.矩阵.嵌套列表的区别与联系

    1.四则远算(与实数): 多维数组.矩阵与实数 进行 加减乘除运算,是矩阵或者数组里面的每一个数 与 这个实数进行加减乘除运算

                    例如: a = np.array([[2,2,2],[2,2,2]])   a*2 = np.array([[4,4,4],[4,4,4]])  a+1 = np.array([[3,3,3],[3,3,3]])

    2.矩阵点积: np.dot(a,b)  矩阵点积是指两个数组(矩阵)进行矩阵乘积,这里有一个注意点,矩阵点积数组不一定是二维数组才能矩阵点积,只需要多维数组a的最后一个维度与b的第一个维度数值一样就可以进行点积运算.
                
                (这个地方并不是把数组转换为矩阵,因为矩阵只能是二维,只是运算方式是矩阵乘积方式)最后的结果依然是一个多维数组(array)
    
                    例如: a = np.ones((3,4,5))   b = np.ones((5,2))     shape大小: np.shape(np.dot((a,b))) = (3,4,2)　
                    
                    其中矩阵点积运算为　a = np.array([[1,2],[3,4]])   b = np.array([[1,2],[3,4]])   np.dot(a,b) = array([[1*1+2*3, 1*2+2*4],[3*1+4*3, 3*2+4*4]]) = array([[7,10],[15,22]])

    3.数组与数组,矩阵与矩阵之间的乘积: 数组与数组,矩阵与矩阵的乘法不一样

            1.数组之间的乘法要求:数组与数组的最后一个维度(至少,要么维度相同,要么其余维度为1)相同 若两个数组维度一样　那么乘积为两个数组 对应位置相乘　例: a = b = np.array([[1,2],[3,4]])  result = array([[1,4][9,16]]) 
                    
                    a = np.array([[1,2],[3,4]]) shape=(2,2)    b = np.array([[1,2]]) shape=(1,2)  相乘: result = np.array([[1,4],[3,8]]) 在相同维度对应位置进行乘法运算(在为1的维度相当于复制成相同维度最后进行乘积运算)


            2.矩阵之间的乘法要求(注意不是点积,而是矩阵之间的乘积):　mat(a) * mat(b) 最重要的一个:转换成矩阵的数组必须是二维数组　再就是矩阵a最后一个维度与矩阵b的第一个维度相同 算法与点积一样

                    矩阵相乘得到还是一个矩阵　np.shape(a) = (4,3)  np.shape(b) = (3,5)  a*b 的shape大小为(4,5)

    4.列表是特殊形式(你可以把看成一个字符串,因为列表可以存储字符串),那么就可以知道,列表不能与常数进行加减除运算,也不能与列表相乘,只可以进行整数(int)乘法运算,跟字符串乘法运算一样,把列表的元素重复多次.

            1.上面说了列表运算可以当做字符串来看,因此他可以与列表进行加法运算,＋的列表附加在原列表最后,但不可以与字符进行加法运算,他也只可以与列表进行加法运算

    5.索引功能:列表与多维数组都有索引与切片功能,可以截出想要的元素

    6.列表没有np.shape( )，只有 len( )
